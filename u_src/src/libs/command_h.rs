/* automatically generated by rust-bindgen 0.64.0 */

pub const REDIR_VARASSIGN: u32 = 1;
pub const AMBIGUOUS_REDIRECT: i32 = -1;
pub const NOCLOBBER_REDIRECT: i32 = -2;
pub const RESTRICTED_REDIRECT: i32 = -3;
pub const HEREDOC_REDIRECT: i32 = -4;
pub const BADVAR_REDIRECT: i32 = -5;
pub const W_HASDOLLAR: u32 = 1;
pub const W_QUOTED: u32 = 2;
pub const W_ASSIGNMENT: u32 = 4;
pub const W_SPLITSPACE: u32 = 8;
pub const W_NOSPLIT: u32 = 16;
pub const W_NOGLOB: u32 = 32;
pub const W_NOSPLIT2: u32 = 64;
pub const W_TILDEEXP: u32 = 128;
pub const W_DOLLARAT: u32 = 256;
pub const W_DOLLARSTAR: u32 = 512;
pub const W_NOCOMSUB: u32 = 1024;
pub const W_ASSIGNRHS: u32 = 2048;
pub const W_NOTILDE: u32 = 4096;
pub const W_ITILDE: u32 = 8192;
pub const W_EXPANDRHS: u32 = 16384;
pub const W_COMPASSIGN: u32 = 32768;
pub const W_ASSNBLTIN: u32 = 65536;
pub const W_ASSIGNARG: u32 = 131072;
pub const W_HASQUOTEDNULL: u32 = 262144;
pub const W_DQUOTE: u32 = 524288;
pub const W_NOPROCSUB: u32 = 1048576;
pub const W_SAWQUOTEDNULL: u32 = 2097152;
pub const W_ASSIGNASSOC: u32 = 4194304;
pub const W_ASSIGNARRAY: u32 = 8388608;
pub const W_ARRAYIND: u32 = 16777216;
pub const W_ASSNGLOBAL: u32 = 33554432;
pub const W_NOBRACE: u32 = 67108864;
pub const W_COMPLETE: u32 = 134217728;
pub const W_CHKLOCAL: u32 = 268435456;
pub const W_NOASSNTILDE: u32 = 536870912;
pub const W_FORCELOCAL: u32 = 1073741824;
pub const PF_NOCOMSUB: u32 = 1;
pub const PF_IGNUNBOUND: u32 = 2;
pub const PF_NOSPLIT2: u32 = 4;
pub const PF_ASSIGNRHS: u32 = 8;
pub const PF_COMPLETE: u32 = 16;
pub const PF_EXPANDRHS: u32 = 32;
pub const PF_ALLINDS: u32 = 64;
pub const SUBSHELL_ASYNC: u32 = 1;
pub const SUBSHELL_PAREN: u32 = 2;
pub const SUBSHELL_COMSUB: u32 = 4;
pub const SUBSHELL_FORK: u32 = 8;
pub const SUBSHELL_PIPE: u32 = 16;
pub const SUBSHELL_PROCSUB: u32 = 32;
pub const SUBSHELL_COPROC: u32 = 64;
pub const SUBSHELL_RESETTRAP: u32 = 128;
pub const CMD_WANT_SUBSHELL: u32 = 1;
pub const CMD_FORCE_SUBSHELL: u32 = 2;
pub const CMD_INVERT_RETURN: u32 = 4;
pub const CMD_IGNORE_RETURN: u32 = 8;
pub const CMD_NO_FUNCTIONS: u32 = 16;
pub const CMD_INHIBIT_EXPANSION: u32 = 32;
pub const CMD_NO_FORK: u32 = 64;
pub const CMD_TIME_PIPELINE: u32 = 128;
pub const CMD_TIME_POSIX: u32 = 256;
pub const CMD_AMPERSAND: u32 = 512;
pub const CMD_STDIN_REDIR: u32 = 1024;
pub const CMD_COMMAND_BUILTIN: u32 = 2048;
pub const CMD_COPROC_SUBSHELL: u32 = 4096;
pub const CMD_LASTPIPE: u32 = 8192;
pub const CMD_STDPATH: u32 = 16384;
pub const CMD_TRY_OPTIMIZING: u32 = 32768;
pub const CASEPAT_FALLTHROUGH: u32 = 1;
pub const CASEPAT_TESTNEXT: u32 = 2;
pub const COND_AND: u32 = 1;
pub const COND_OR: u32 = 2;
pub const COND_UNARY: u32 = 3;
pub const COND_BINARY: u32 = 4;
pub const COND_TERM: u32 = 5;
pub const COND_EXPR: u32 = 6;
pub const COPROC_RUNNING: u32 = 1;
pub const COPROC_DEAD: u32 = 2;
pub const CMDERR_DEFAULT: u32 = 0;
pub const CMDERR_BADTYPE: u32 = 1;
pub const CMDERR_BADCONN: u32 = 2;
pub const CMDERR_BADJUMP: u32 = 3;
pub const CMDERR_LAST: u32 = 3;
pub const r_instruction_r_output_direction: r_instruction = 0;
pub const r_instruction_r_input_direction: r_instruction = 1;
pub const r_instruction_r_inputa_direction: r_instruction = 2;
pub const r_instruction_r_appending_to: r_instruction = 3;
pub const r_instruction_r_reading_until: r_instruction = 4;
pub const r_instruction_r_reading_string: r_instruction = 5;
pub const r_instruction_r_duplicating_input: r_instruction = 6;
pub const r_instruction_r_duplicating_output: r_instruction = 7;
pub const r_instruction_r_deblank_reading_until: r_instruction = 8;
pub const r_instruction_r_close_this: r_instruction = 9;
pub const r_instruction_r_err_and_out: r_instruction = 10;
pub const r_instruction_r_input_output: r_instruction = 11;
pub const r_instruction_r_output_force: r_instruction = 12;
pub const r_instruction_r_duplicating_input_word: r_instruction = 13;
pub const r_instruction_r_duplicating_output_word: r_instruction = 14;
pub const r_instruction_r_move_input: r_instruction = 15;
pub const r_instruction_r_move_output: r_instruction = 16;
pub const r_instruction_r_move_input_word: r_instruction = 17;
pub const r_instruction_r_move_output_word: r_instruction = 18;
pub const r_instruction_r_append_err_and_out: r_instruction = 19;
pub type r_instruction = ::std::os::raw::c_uint;
pub const command_type_cm_for: command_type = 0;
pub const command_type_cm_case: command_type = 1;
pub const command_type_cm_while: command_type = 2;
pub const command_type_cm_if: command_type = 3;
pub const command_type_cm_simple: command_type = 4;
pub const command_type_cm_select: command_type = 5;
pub const command_type_cm_connection: command_type = 6;
pub const command_type_cm_function_def: command_type = 7;
pub const command_type_cm_until: command_type = 8;
pub const command_type_cm_group: command_type = 9;
pub const command_type_cm_arith: command_type = 10;
pub const command_type_cm_cond: command_type = 11;
pub const command_type_cm_arith_for: command_type = 12;
pub const command_type_cm_subshell: command_type = 13;
pub const command_type_cm_coproc: command_type = 14;
pub type command_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct word_desc {
    pub word: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
pub type WORD_DESC = word_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct word_list {
    pub next: *mut word_list,
    pub word: *mut WORD_DESC,
}
pub type WORD_LIST = word_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union REDIRECTEE {
    pub dest: ::std::os::raw::c_int,
    pub filename: *mut WORD_DESC,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct redirect {
    pub next: *mut redirect,
    pub redirector: REDIRECTEE,
    pub rflags: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub instruction: r_instruction,
    pub redirectee: REDIRECTEE,
    pub here_doc_eof: *mut ::std::os::raw::c_char,
}
pub type REDIRECT = redirect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct element {
    pub word: *mut WORD_DESC,
    pub redirect: *mut REDIRECT,
}
pub type ELEMENT = element;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct command {
    pub type_: command_type,
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub redirects: *mut REDIRECT,
    pub value: command__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union command__bindgen_ty_1 {
    pub For: *mut for_com,
    pub Case: *mut case_com,
    pub While: *mut while_com,
    pub If: *mut if_com,
    pub Connection: *mut connection,
    pub Simple: *mut simple_com,
    pub Function_def: *mut function_def,
    pub Group: *mut group_com,
    pub Select: *mut select_com,
    pub Arith: *mut arith_com,
    pub Cond: *mut cond_com,
    pub ArithFor: *mut airth_for_com,
    pub Subshell: *mut subshell_com,
    pub Coproc: *mut coproc_com,
}
pub type COMMAND = command;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct select_com{
    pub flags:libc::c_int,
    pub line: libc::c_int,
    pub name: *mut WORD_DESC,
    pub map_llist: *mut WORD_LIST,
    pub action: *mut COMMAND,
}
pub type SELECT_COM = select_com;


#[derive(Copy, Clone)]
#[repr(C)]
pub struct arith_com{
    pub flags:libc::c_int,
    pub line: libc::c_int,
    pub exp: *mut WORD_LIST,
}
pub type ARITH_COM = arith_com;



#[derive(Copy, Clone)]
#[repr(C)]
pub struct airth_for_com{
    pub flags:libc::c_int,
    pub line: libc::c_int,
    pub init: *mut WORD_LIST,
    pub test: *mut WORD_LIST,
    pub step: *mut WORD_LIST,
    pub action: *mut COMMAND,
}
pub type AIRTH_FOR_COM = airth_for_com;



#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct connection {
    pub ignore: ::std::os::raw::c_int,
    pub first: *mut COMMAND,
    pub second: *mut COMMAND,
    pub connector: ::std::os::raw::c_int,
}
pub type CONNECTION = connection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pattern_list {
    pub next: *mut pattern_list,
    pub patterns: *mut WORD_LIST,
    pub action: *mut COMMAND,
    pub flags: ::std::os::raw::c_int,
}
pub type PATTERN_LIST = pattern_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct case_com {
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub word: *mut WORD_DESC,
    pub clauses: *mut PATTERN_LIST,
}
pub type CASE_COM = case_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct for_com {
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub name: *mut WORD_DESC,
    pub map_list: *mut WORD_LIST,
    pub action: *mut COMMAND,
}
pub type FOR_COM = for_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_com {
    pub flags: ::std::os::raw::c_int,
    pub test: *mut COMMAND,
    pub true_case: *mut COMMAND,
    pub false_case: *mut COMMAND,
}
pub type IF_COM = if_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct while_com {
    pub flags: ::std::os::raw::c_int,
    pub test: *mut COMMAND,
    pub action: *mut COMMAND,
}
pub type WHILE_COM = while_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cond_com {
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub op: *mut WORD_DESC,
    pub left: *mut cond_com,
    pub right: *mut cond_com,
}
pub type COND_COM = cond_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simple_com {
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub words: *mut WORD_LIST,
    pub redirects: *mut REDIRECT,
}
pub type SIMPLE_COM = simple_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct function_def {
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub name: *mut WORD_DESC,
    pub command: *mut COMMAND,
    pub source_file: *mut ::std::os::raw::c_char,
}
pub type FUNCTION_DEF = function_def;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_com {
    pub ignore: ::std::os::raw::c_int,
    pub command: *mut COMMAND,
}
pub type GROUP_COM = group_com;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subshell_com {
    pub flags: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub command: *mut COMMAND,
}
pub type SUBSHELL_COM = subshell_com;
pub type pid_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct coproc {
    pub c_name: *mut ::std::os::raw::c_char,
    pub c_pid: pid_t,
    pub c_rfd: ::std::os::raw::c_int,
    pub c_wfd: ::std::os::raw::c_int,
    pub c_rsave: ::std::os::raw::c_int,
    pub c_wsave: ::std::os::raw::c_int,
    pub c_flags: ::std::os::raw::c_int,
    pub c_status: ::std::os::raw::c_int,
    pub c_lock: ::std::os::raw::c_int,
}
pub type Coproc = coproc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct coproc_com {
    pub flags: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub command: *mut COMMAND,
}
pub type COPROC_COM = coproc_com;
extern "C" {
    pub static mut global_command: *mut COMMAND;
}
extern "C" {
    pub static mut sh_coproc: Coproc;
}
extern "C" {
    pub fn copy_function_def_contents(
        arg1: *mut FUNCTION_DEF,
        arg2: *mut FUNCTION_DEF,
    ) -> *mut FUNCTION_DEF;
}
extern "C" {
    pub fn copy_function_def(arg1: *mut FUNCTION_DEF) -> *mut FUNCTION_DEF;
}
extern "C" {
    pub fn copy_word(arg1: *mut WORD_DESC) -> *mut WORD_DESC;
}
extern "C" {
    pub fn copy_word_list(arg1: *mut WORD_LIST) -> *mut WORD_LIST;
}
extern "C" {
    pub fn copy_redirect(arg1: *mut REDIRECT) -> *mut REDIRECT;
}
extern "C" {
    pub fn copy_redirects(arg1: *mut REDIRECT) -> *mut REDIRECT;
}
extern "C" {
    pub fn copy_command(arg1: *mut COMMAND) -> *mut COMMAND;
}
